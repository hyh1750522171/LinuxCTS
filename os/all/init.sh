#!/usr/bin/env bash

# ÂÖ®Â±ÄÂèòÈáè
Green="\033[32m"
Red="\033[31m"
YellowBG="\033[43;37m"
Yellow="\033[33m"
blue="\033[44;37m"
GreenBG="\033[42;37m"
RedBG="\033[41;37m"
Font="\033[0m"
shanshuo1="\033[5m"
shanshuo2="\033[0m"
Red_font_prefix="\033[31m"
Font_color_suffix="\033[0m"
Error="${Red_font_prefix}[ÈîôËØØ]${Font_color_suffix}"

#Ê†∏ÂøÉÊñá‰ª∂
get_opsy(){
    [ -f /etc/redhat-release ] && awk '{print ($1,$3~/^[0-9]/?$3:$4)}' /etc/redhat-release && return
    [ -f /etc/os-release ] && awk -F'[= "]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release && return
    [ -f /etc/lsb-release ] && awk -F'[="]+' '/DESCRIPTION/{print $2}' /etc/lsb-release && return
}
#ÂèòÈáèÂºïÁî®
opsy=$( get_opsy )
cores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )
tram=$( free -m | awk '/Mem/ {print $2}' )
uram=$( free -m | awk '/Mem/ {print $3}' )
ipaddr=$(curl -s myip.ipip.net | awk -F ' ' '{print $2}' | awk -F 'Ôºö' '{print $2}')
ipdz=$(curl -s myip.ipip.net | awk -F 'Ôºö' '{print $3}')

#Ê£ÄÊü•Ë¥¶Âè∑
check_root(){
	if [[ $EUID != 0 ]];then
		echo -e "${RedBG}ÂΩìÂâç‰∏çÊòØROOTË¥¶Âè∑ÔºåÂª∫ËÆÆÊõ¥Êç¢ROOTË¥¶Âè∑‰ΩøÁî®„ÄÇ${Font}"
		echo -e "${Yellow}‰∏çË¶ÅÊòØÁî® sudo ÊâßË°åËÑöÊú¨ÔºåÁõ¥Êé•‰ΩøÁî® ROOT Ë¥¶Âè∑ÊâßË°å„ÄÇ${Font} "
		countdown_sleep 5
        exit
	fi
}

#ÂÆâË£Ö‰æùËµñ
sys_install(){
    if ! type wget >/dev/null 2>&1; then
        echo -e "${RedBG}wget Êú™ÂÆâË£ÖÔºåÂáÜÂ§áÂÆâË£ÖÔºÅ${Font}"
	    apt-get install wget -y || yum install wget -y
        judge "wget ÂÆâË£Ö"
    fi
}

# ÂÆö‰πâÂáΩÊï∞Ôºå‰ΩøÁî®tputÂëΩ‰ª§ÂÆûÁé∞Êõ¥ÁæéËßÇÁöÑÂÄíËÆ°Êó∂
function countdown_sleep() {
    local countdown_time="$1"  # Êé•Êî∂ÂÄíËÆ°Êó∂ÊÄªÊó∂Èïø‰Ωú‰∏∫ÂèÇÊï∞

    for ((i = countdown_time; i >= 1; i--)); do
        echo -ne "\r ÂÄíËÆ°Êó∂ËøòÂâ©: ${Yellow} $i ${Font} Áßí "
        sleep 1
    done
    clear
}

# Ê£ÄÊü•ÊòØÂê¶ÂÆâË£ÖÊàêÂäü
judge() {
  if [[ $? -eq 0 ]]; then
    echo -e "${OK} ${GreenBG} $1 ÂÆåÊàê ${Font}"
    sleep 1
  else
    echo -e "${Error} ${RedBG} $1 Â§±Ë¥• ${Font}"
    exit
  fi
}

# ÂÆö‰πâÂáΩÊï∞Ôºå‰ΩøÂÖ∂ÂèØ‰ª•Êé•ÂèóÂèÇÊï∞
function gpt_style_output() {
    local text="$1"
    for ((i = 0; i < ${#text}; i++)); do
        echo -n "${text:$i:1}"
        sleep 0.05
    done
    echo ""
}

# Ê£ÄÊü•ÂÆâË£ÖDocker
install_docker(){
    PACKAGE_NAME="docker"
    if ! command -v $PACKAGE_NAME &> /dev/null; then
        source <(curl -s ${download_url}/os/all/get-docker.sh)
    else
        echo "$PACKAGE_NAME Â∑≤ÂÆâË£Ö."
    fi
}

headers(){
    # ÂÆö‰πâË°®Â§¥ÂÜÖÂÆπ
    header="${blue}=====================================================${Font}
${blue}=             LinuxCTS - ÁªºÂêàLinuxËÑöÊú¨              =${Font}
${blue}=                                                   =${Font}
${blue}=                ÂΩìÂâçÁâàÊú¨ V2.6                      =${Font}
${blue}=            Êõ¥Êñ∞Êó∂Èó¥ 2024Âπ¥11Êúà29Êó•                =${Font}
${blue}=              bug ÂèçÈ¶à ‚¨á‚¨á‚¨á‚¨á‚¨á‚¨áüò≥                    =${Font}
${blue}= https://github.com/hyh1750522171/LinuxCTS/issues  =${Font}
${blue}=                                                   =${Font}
${blue}=====================================================${Font}
Êìç‰ΩúÁ≥ªÁªü${Green} $opsy ${Font}CPU${Green} $cores ${Font}Ê†∏ Á≥ªÁªüÂÜÖÂ≠ò${Green} $tram ${Font}MB
IPÂú∞ÂùÄ${Green} $ipaddr $ipdz ${Font}
====================================================="

    # ÁªÑÂêàÂëΩ‰ª§ÔºåÂÖàËæìÂá∫Ë°®Â§¥ÔºåÂÜçËæìÂá∫Âä®ÊÄÅÊï∞ÊçÆÔºàÂéªÈô§Ë°®Â§¥ÊâÄÂú®Ë°åÔºåÂÅáËÆæÂä®ÊÄÅÊï∞ÊçÆÂëΩ‰ª§ËæìÂá∫ÊúâË°®Â§¥ÈúÄË¶ÅÂéªÈô§Ôºâ
    echo -e "$header"
}

# Á≥ªÁªüÊû∂ÊûÑ
SystemInfo_GetSystemBit() {
    local sysarch="$(uname -m)"
    if [ "${sysarch}" = "unknown" ] || [ "${sysarch}" = "" ]; then
        local sysarch="$(arch)"
    fi
    if [ "${sysarch}" = "x86_64" ]; then
        # X86Âπ≥Âè∞ 64‰Ωç
        Bench_Result_SystemBit_Short="64"
        Bench_Result_SystemBit_Full="amd64"
    elif [ "${sysarch}" = "i386" ] || [ "${sysarch}" = "i686" ]; then
        # X86Âπ≥Âè∞ 32‰Ωç
        Bench_Result_SystemBit_Short="32"
        Bench_Result_SystemBit_Full="i386"
    elif [ "${sysarch}" = "armv7l" ] || [ "${sysarch}" = "armv8" ] || [ "${sysarch}" = "armv8l" ] || [ "${sysarch}" = "aarch64" ]; then
        # ARMÂπ≥Âè∞ ÊöÇ‰∏îÂ∞Ü32‰Ωç/64‰ΩçÁªü‰∏ÄÂØπÂæÖ
        Bench_Result_SystemBit_Short="arm"
        Bench_Result_SystemBit_Full="arm"
    else
        Bench_Result_SystemBit_Short="unknown"
        Bench_Result_SystemBit_Full="unknown"                
    fi
}

# Á≥ªÁªüÁâàÊú¨
SystemInfo_GetOSRelease() {
    if [ -f "/etc/centos-release" ]; then # CentOS
        Var_OSRelease="centos"
        local Var_OSReleaseFullName="$(cat /etc/os-release | awk -F '[= "]' '/PRETTY_NAME/{print $3,$4}')"
        if [ "$(rpm -qa | grep -o el6 | sort -u)" = "el6" ]; then
            Var_CentOSELRepoVersion="6"
            local Var_OSReleaseVersion="$(cat /etc/centos-release | awk '{print $3}')"
        elif [ "$(rpm -qa | grep -o el7 | sort -u)" = "el7" ]; then
            Var_CentOSELRepoVersion="7"
            local Var_OSReleaseVersion="$(cat /etc/centos-release | awk '{print $4}')"
        elif [ "$(rpm -qa | grep -o el8 | sort -u)" = "el8" ]; then
            Var_CentOSELRepoVersion="8"
            local Var_OSReleaseVersion="$(cat /etc/centos-release | awk '{print $4}')"
        else
            local Var_CentOSELRepoVersion="unknown"
            local Var_OSReleaseVersion="<Unknown Release>"
        fi
        local Var_OSReleaseArch="$(arch)"
        Bench_Result_OSReleaseFullName="$Var_OSReleaseFullName $Var_OSReleaseVersion ($Var_OSReleaseArch)"
    elif [ -f "/etc/redhat-release" ]; then # RedHat
        Var_OSRelease="rhel"
        local Var_OSReleaseFullName="$(cat /etc/os-release | awk -F '[= "]' '/PRETTY_NAME/{print $3,$4}')"
        if [ "$(rpm -qa | grep -o el6 | sort -u)" = "el6" ]; then
            Var_RedHatELRepoVersion="6"
            local Var_OSReleaseVersion="$(cat /etc/redhat-release | awk '{print $3}')"
        elif [ "$(rpm -qa | grep -o el7 | sort -u)" = "el7" ]; then
            Var_RedHatELRepoVersion="7"
            local Var_OSReleaseVersion="$(cat /etc/redhat-release | awk '{print $4}')"
        elif [ "$(rpm -qa | grep -o el8 | sort -u)" = "el8" ]; then
            Var_RedHatELRepoVersion="8"
            local Var_OSReleaseVersion="$(cat /etc/redhat-release | awk '{print $4}')"
        else
            local Var_RedHatELRepoVersion="unknown"
            local Var_OSReleaseVersion="<Unknown Release>"
        fi
        local Var_OSReleaseArch="$(arch)"
        Bench_Result_OSReleaseFullName="$Var_OSReleaseFullName $Var_OSReleaseVersion ($Var_OSReleaseArch)"
    elif [ -f "/etc/fedora-release" ]; then # Fedora
        Var_OSRelease="fedora"
        local Var_OSReleaseFullName="$(cat /etc/os-release | awk -F '[= "]' '/PRETTY_NAME/{print $3}')"
        local Var_OSReleaseVersion="$(cat /etc/fedora-release | awk '{print $3,$4,$5,$6,$7}')"
        local Var_OSReleaseArch="$(arch)"
        Bench_Result_OSReleaseFullName="$Var_OSReleaseFullName $Var_OSReleaseVersion ($Var_OSReleaseArch)"
    elif [ -f "/etc/lsb-release" ]; then # Ubuntu
        Var_OSRelease="ubuntu"
        local Var_OSReleaseFullName="$(cat /etc/os-release | awk -F '[= "]' '/NAME/{print $3}' | head -n1)"
        local Var_OSReleaseVersion="$(cat /etc/os-release | awk -F '[= "]' '/VERSION/{print $3,$4,$5,$6,$7}' | head -n1)"
        local Var_OSReleaseArch="$(arch)"
        Bench_Result_OSReleaseFullName="$Var_OSReleaseFullName $Var_OSReleaseVersion ($Var_OSReleaseArch)"
        Var_OSReleaseVersion_Short="$(cat /etc/lsb-release | awk -F '[= "]' '/DISTRIB_RELEASE/{print $2}')"
    elif [ -f "/etc/debian_version" ]; then # Debian
        Var_OSRelease="debian"
        local Var_OSReleaseFullName="$(cat /etc/os-release | awk -F '[= "]' '/PRETTY_NAME/{print $3,$4}')"
        local Var_OSReleaseVersion="$(cat /etc/debian_version | awk '{print $1}')"
        local Var_OSReleaseVersionShort="$(cat /etc/debian_version | awk '{printf "%d\n",$1}')"
        if [ "${Var_OSReleaseVersionShort}" = "7" ]; then
            Var_OSReleaseVersion_Short="7"
            Var_OSReleaseVersion_Codename="wheezy"
            local Var_OSReleaseFullName="${Var_OSReleaseFullName} \"Wheezy\""
        elif [ "${Var_OSReleaseVersionShort}" = "8" ]; then
            Var_OSReleaseVersion_Short="8"
            Var_OSReleaseVersion_Codename="jessie"
            local Var_OSReleaseFullName="${Var_OSReleaseFullName} \"Jessie\""
        elif [ "${Var_OSReleaseVersionShort}" = "9" ]; then
            Var_OSReleaseVersion_Short="9"
            Var_OSReleaseVersion_Codename="stretch"
            local Var_OSReleaseFullName="${Var_OSReleaseFullName} \"Stretch\""
        elif [ "${Var_OSReleaseVersionShort}" = "10" ]; then
            Var_OSReleaseVersion_Short="10"
            Var_OSReleaseVersion_Codename="buster"
            local Var_OSReleaseFullName="${Var_OSReleaseFullName} \"Buster\""
        else
            Var_OSReleaseVersion_Short="sid"
            Var_OSReleaseVersion_Codename="sid"
            local Var_OSReleaseFullName="${Var_OSReleaseFullName} \"Sid (Testing)\""
        fi
        local Var_OSReleaseArch="$(arch)"
        Bench_Result_OSReleaseFullName="$Var_OSReleaseFullName $Var_OSReleaseVersion ($Var_OSReleaseArch)"
    elif [ -f "/etc/alpine-release" ]; then # Alpine Linux
        Var_OSRelease="alpinelinux"
        local Var_OSReleaseFullName="$(cat /etc/os-release | awk -F '[= "]' '/NAME/{print $3,$4}' | head -n1)"
        local Var_OSReleaseVersion="$(cat /etc/alpine-release | awk '{print $1}')"
        local Var_OSReleaseArch="$(arch)"
        Bench_Result_OSReleaseFullName="$Var_OSReleaseFullName $Var_OSReleaseVersion ($Var_OSReleaseArch)"
    else
        Var_OSRelease="unknown" # Êú™Áü•Á≥ªÁªüÂàÜÊîØ
        Bench_Result_OSReleaseFullName="[Error: Unknown Linux Branch !]"
    fi
}
